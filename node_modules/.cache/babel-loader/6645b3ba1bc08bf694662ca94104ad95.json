{"ast":null,"code":"'use strict';\n\nvar base64 = require('./base64');\n\nvar fetch = require('./fetch'); // Given a regex, return a function that test if against a string\n\n\nfunction fromRegex(r) {\n  return function (o) {\n    return typeof o === 'string' && r.test(o);\n  };\n} // Try to apply a prefix to a name\n\n\nfunction prefix(pre, name) {\n  return typeof pre === 'string' ? pre + name : typeof pre === 'function' ? pre(name) : name;\n}\n/**\n * Load one or more audio files\n *\n *\n * Possible option keys:\n *\n * - __from__ {Function|String}: a function or string to convert from file names to urls.\n * If is a string it will be prefixed to the name:\n * `load(ac, 'snare.mp3', { from: 'http://audio.net/samples/' })`\n * If it's a function it receives the file name and should return the url as string.\n * - __only__ {Array} - when loading objects, if provided, only the given keys\n * will be included in the decoded object:\n * `load(ac, 'piano.json', { only: ['C2', 'D2'] })`\n *\n * @param {AudioContext} ac - the audio context\n * @param {Object} source - the object to be loaded\n * @param {Object} options - (Optional) the load options for that object\n * @param {Object} defaultValue - (Optional) the default value to return as\n * in a promise if not valid loader found\n */\n\n\nfunction load(ac, source, options, defVal) {\n  var loader = // Basic audio loading\n  isArrayBuffer(source) ? loadArrayBuffer : isAudioFileName(source) ? loadAudioFile : isPromise(source) ? loadPromise // Compound objects\n  : isArray(source) ? loadArrayData : isObject(source) ? loadObjectData : isJsonFileName(source) ? loadJsonFile // Base64 encoded audio\n  : isBase64Audio(source) ? loadBase64Audio : isJsFileName(source) ? loadMidiJSFile : null;\n  var opts = options || {};\n  return loader ? loader(ac, source, opts) : defVal ? Promise.resolve(defVal) : Promise.reject('Source not valid (' + source + ')');\n}\n\nload.fetch = fetch; // BASIC AUDIO LOADING\n// ===================\n// Load (decode) an array buffer\n\nfunction isArrayBuffer(o) {\n  return o instanceof ArrayBuffer;\n}\n\nfunction loadArrayBuffer(ac, array, options) {\n  return new Promise(function (done, reject) {\n    ac.decodeAudioData(array, function (buffer) {\n      done(buffer);\n    }, function () {\n      reject(\"Can't decode audio data (\" + array.slice(0, 30) + '...)');\n    });\n  });\n} // Load an audio filename\n\n\nvar isAudioFileName = fromRegex(/\\.(mp3|wav|ogg)(\\?.*)?$/i);\n\nfunction loadAudioFile(ac, name, options) {\n  var url = prefix(options.from, name);\n  return load(ac, load.fetch(url, 'arraybuffer'), options);\n} // Load the result of a promise\n\n\nfunction isPromise(o) {\n  return o && typeof o.then === 'function';\n}\n\nfunction loadPromise(ac, promise, options) {\n  return promise.then(function (value) {\n    return load(ac, value, options);\n  });\n} // COMPOUND OBJECTS\n// ================\n// Try to load all the items of an array\n\n\nvar isArray = Array.isArray;\n\nfunction loadArrayData(ac, array, options) {\n  return Promise.all(array.map(function (data) {\n    return load(ac, data, options, data);\n  }));\n} // Try to load all the values of a key/value object\n\n\nfunction isObject(o) {\n  return o && typeof o === 'object';\n}\n\nfunction loadObjectData(ac, obj, options) {\n  var dest = {};\n  var promises = Object.keys(obj).map(function (key) {\n    if (options.only && options.only.indexOf(key) === -1) return null;\n    var value = obj[key];\n    return load(ac, value, options, value).then(function (audio) {\n      dest[key] = audio;\n    });\n  });\n  return Promise.all(promises).then(function () {\n    return dest;\n  });\n} // Load the content of a JSON file\n\n\nvar isJsonFileName = fromRegex(/\\.json(\\?.*)?$/i);\n\nfunction loadJsonFile(ac, name, options) {\n  var url = prefix(options.from, name);\n  return load(ac, load.fetch(url, 'text').then(JSON.parse), options);\n} // BASE64 ENCODED FORMATS\n// ======================\n// Load strings with Base64 encoded audio\n\n\nvar isBase64Audio = fromRegex(/^data:audio/);\n\nfunction loadBase64Audio(ac, source, options) {\n  var i = source.indexOf(',');\n  return load(ac, base64.decode(source.slice(i + 1)).buffer, options);\n} // Load .js files with MidiJS soundfont prerendered audio\n\n\nvar isJsFileName = fromRegex(/\\.js(\\?.*)?$/i);\n\nfunction loadMidiJSFile(ac, name, options) {\n  var url = prefix(options.from, name);\n  return load(ac, load.fetch(url, 'text').then(midiJsToJson), options);\n} // convert a MIDI.js javascript soundfont file to json\n\n\nfunction midiJsToJson(data) {\n  var begin = data.indexOf('MIDI.Soundfont.');\n  if (begin < 0) throw Error('Invalid MIDI.js Soundfont format');\n  begin = data.indexOf('=', begin) + 2;\n  var end = data.lastIndexOf(',');\n  return JSON.parse(data.slice(begin, end) + '}');\n}\n\nif (typeof module === 'object' && module.exports) module.exports = load;\nif (typeof window !== 'undefined') window.loadAudio = load;","map":{"version":3,"sources":["/Users/sylviayu/node_modules/audio-loader/lib/index.js"],"names":["base64","require","fetch","fromRegex","r","o","test","prefix","pre","name","load","ac","source","options","defVal","loader","isArrayBuffer","loadArrayBuffer","isAudioFileName","loadAudioFile","isPromise","loadPromise","isArray","loadArrayData","isObject","loadObjectData","isJsonFileName","loadJsonFile","isBase64Audio","loadBase64Audio","isJsFileName","loadMidiJSFile","opts","Promise","resolve","reject","ArrayBuffer","array","done","decodeAudioData","buffer","slice","url","from","then","promise","value","Array","all","map","data","obj","dest","promises","Object","keys","key","only","indexOf","audio","JSON","parse","i","decode","midiJsToJson","begin","Error","end","lastIndexOf","module","exports","window","loadAudio"],"mappings":"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","sourcesContent":["'use strict'\n\nvar base64 = require('./base64')\nvar fetch = require('./fetch')\n\n// Given a regex, return a function that test if against a string\nfunction fromRegex (r) {\n  return function (o) { return typeof o === 'string' && r.test(o) }\n}\n// Try to apply a prefix to a name\nfunction prefix (pre, name) {\n  return typeof pre === 'string' ? pre + name\n    : typeof pre === 'function' ? pre(name)\n    : name\n}\n\n/**\n * Load one or more audio files\n *\n *\n * Possible option keys:\n *\n * - __from__ {Function|String}: a function or string to convert from file names to urls.\n * If is a string it will be prefixed to the name:\n * `load(ac, 'snare.mp3', { from: 'http://audio.net/samples/' })`\n * If it's a function it receives the file name and should return the url as string.\n * - __only__ {Array} - when loading objects, if provided, only the given keys\n * will be included in the decoded object:\n * `load(ac, 'piano.json', { only: ['C2', 'D2'] })`\n *\n * @param {AudioContext} ac - the audio context\n * @param {Object} source - the object to be loaded\n * @param {Object} options - (Optional) the load options for that object\n * @param {Object} defaultValue - (Optional) the default value to return as\n * in a promise if not valid loader found\n */\nfunction load (ac, source, options, defVal) {\n  var loader =\n    // Basic audio loading\n      isArrayBuffer(source) ? loadArrayBuffer\n    : isAudioFileName(source) ? loadAudioFile\n    : isPromise(source) ? loadPromise\n    // Compound objects\n    : isArray(source) ? loadArrayData\n    : isObject(source) ? loadObjectData\n    : isJsonFileName(source) ? loadJsonFile\n    // Base64 encoded audio\n    : isBase64Audio(source) ? loadBase64Audio\n    : isJsFileName(source) ? loadMidiJSFile\n    : null\n\n  var opts = options || {}\n  return loader ? loader(ac, source, opts)\n    : defVal ? Promise.resolve(defVal)\n    : Promise.reject('Source not valid (' + source + ')')\n}\nload.fetch = fetch\n\n// BASIC AUDIO LOADING\n// ===================\n\n// Load (decode) an array buffer\nfunction isArrayBuffer (o) { return o instanceof ArrayBuffer }\nfunction loadArrayBuffer (ac, array, options) {\n  return new Promise(function (done, reject) {\n    ac.decodeAudioData(array,\n      function (buffer) { done(buffer) },\n      function () { reject(\"Can't decode audio data (\" + array.slice(0, 30) + '...)') }\n    )\n  })\n}\n\n// Load an audio filename\nvar isAudioFileName = fromRegex(/\\.(mp3|wav|ogg)(\\?.*)?$/i)\nfunction loadAudioFile (ac, name, options) {\n  var url = prefix(options.from, name)\n  return load(ac, load.fetch(url, 'arraybuffer'), options)\n}\n\n// Load the result of a promise\nfunction isPromise (o) { return o && typeof o.then === 'function' }\nfunction loadPromise (ac, promise, options) {\n  return promise.then(function (value) {\n    return load(ac, value, options)\n  })\n}\n\n// COMPOUND OBJECTS\n// ================\n\n// Try to load all the items of an array\nvar isArray = Array.isArray\nfunction loadArrayData (ac, array, options) {\n  return Promise.all(array.map(function (data) {\n    return load(ac, data, options, data)\n  }))\n}\n\n// Try to load all the values of a key/value object\nfunction isObject (o) { return o && typeof o === 'object' }\nfunction loadObjectData (ac, obj, options) {\n  var dest = {}\n  var promises = Object.keys(obj).map(function (key) {\n    if (options.only && options.only.indexOf(key) === -1) return null\n    var value = obj[key]\n    return load(ac, value, options, value).then(function (audio) {\n      dest[key] = audio\n    })\n  })\n  return Promise.all(promises).then(function () { return dest })\n}\n\n// Load the content of a JSON file\nvar isJsonFileName = fromRegex(/\\.json(\\?.*)?$/i)\nfunction loadJsonFile (ac, name, options) {\n  var url = prefix(options.from, name)\n  return load(ac, load.fetch(url, 'text').then(JSON.parse), options)\n}\n\n// BASE64 ENCODED FORMATS\n// ======================\n\n// Load strings with Base64 encoded audio\nvar isBase64Audio = fromRegex(/^data:audio/)\nfunction loadBase64Audio (ac, source, options) {\n  var i = source.indexOf(',')\n  return load(ac, base64.decode(source.slice(i + 1)).buffer, options)\n}\n\n// Load .js files with MidiJS soundfont prerendered audio\nvar isJsFileName = fromRegex(/\\.js(\\?.*)?$/i)\nfunction loadMidiJSFile (ac, name, options) {\n  var url = prefix(options.from, name)\n  return load(ac, load.fetch(url, 'text').then(midiJsToJson), options)\n}\n\n// convert a MIDI.js javascript soundfont file to json\nfunction midiJsToJson (data) {\n  var begin = data.indexOf('MIDI.Soundfont.')\n  if (begin < 0) throw Error('Invalid MIDI.js Soundfont format')\n  begin = data.indexOf('=', begin) + 2\n  var end = data.lastIndexOf(',')\n  return JSON.parse(data.slice(begin, end) + '}')\n}\n\nif (typeof module === 'object' && module.exports) module.exports = load\nif (typeof window !== 'undefined') window.loadAudio = load\n"]},"metadata":{},"sourceType":"script"}