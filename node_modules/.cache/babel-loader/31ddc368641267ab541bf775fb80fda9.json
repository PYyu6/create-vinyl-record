{"ast":null,"code":"'use strict';\n\nvar parser = require('note-parser');\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url\n * @return {Soundfont} a soundfont object\n */\n\n\nfunction Soundfont(ctx, nameToUrl) {\n  console.warn('new Soundfont() is deprected');\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()');\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx);\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl;\n  this.ctx = ctx;\n  this.instruments = {};\n  this.promises = [];\n}\n\nSoundfont.prototype.onready = function (callback) {\n  console.warn('deprecated API');\n  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()');\n  Promise.all(this.promises).then(callback);\n};\n\nSoundfont.prototype.instrument = function (name, options) {\n  console.warn('new Soundfont().instrument() is deprecated.');\n  console.log('Please use Soundfont.instrument() instead.');\n  var ctx = this.ctx;\n  name = name || 'default';\n  if (name in this.instruments) return this.instruments[name];\n  var inst = {\n    name: name,\n    play: oscillatorPlayer(ctx, options)\n  };\n  this.instruments[name] = inst;\n\n  if (name !== 'default') {\n    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {\n      inst.play = instrument.play;\n      return inst;\n    });\n    this.promises.push(promise);\n\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()');\n      promise.then(cb);\n    };\n  } else {\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()');\n      cb();\n    };\n  }\n\n  return inst;\n};\n/*\n * Load the buffers of a given instrument name. It returns a promise that resolves\n * to a hash with midi note numbers as keys, and audio buffers as values.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name (it accepts an url if starts with \"http\")\n * @param {Object} options - (Optional) options object\n * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }\n *\n * The options object accepts the following keys:\n *\n * - nameToUrl {Function}: a function to convert from instrument names to urls.\n * By default it uses Benjamin Gleitzman's package of\n * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n * - notes {Array}: the list of note names to be decoded (all by default)\n *\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {\n *  buffers[60] // => An <AudioBuffer> corresponding to note C4\n * })\n */\n\n\nfunction loadBuffers(ac, name, options) {\n  console.warn('Soundfont.loadBuffers is deprecate.');\n  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.');\n  return Soundfont.instrument(ac, name, options).then(function (inst) {\n    return inst.buffers;\n  });\n}\n\nSoundfont.loadBuffers = loadBuffers;\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} defaultOptions - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.4)\n  * - destination: the player destination (default: ac.destination)\n */\n\nfunction oscillatorPlayer(ctx, defaultOptions) {\n  defaultOptions = defaultOptions || {};\n  return function (note, time, duration, options) {\n    console.warn('The oscillator player is deprecated.');\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.');\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note);\n    var freq = midi ? parser.midiToFreq(midi, 440) : null;\n    if (!freq) return;\n    duration = duration || 0.2;\n    options = options || {};\n    var destination = options.destination || defaultOptions.destination || ctx.destination;\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine';\n    var gain = options.gain || defaultOptions.gain || 0.4;\n    var vco = ctx.createOscillator();\n    vco.type = vcoType;\n    vco.frequency.value = freq;\n    /* VCA */\n\n    var vca = ctx.createGain();\n    vca.gain.value = gain;\n    /* Connections */\n\n    vco.connect(vca);\n    vca.connect(destination);\n    vco.start(time);\n    if (duration > 0) vco.stop(time + duration);\n    return vco;\n  };\n}\n/**\n * Given a note name, return the note midi number\n *\n * @name noteToMidi\n * @function\n * @param {String} noteName\n * @return {Integer} the note midi number or null if not a valid note name\n */\n\n\nSoundfont.noteToMidi = parser.midi;\nmodule.exports = Soundfont;","map":{"version":3,"sources":["/Users/sylviayu/node_modules/soundfont-player/lib/legacy.js"],"names":["parser","require","Soundfont","ctx","nameToUrl","console","warn","log","instruments","promises","prototype","onready","callback","Promise","all","then","instrument","name","options","inst","play","oscillatorPlayer","promise","push","cb","loadBuffers","ac","buffers","defaultOptions","note","time","duration","midi","freq","midiToFreq","destination","vcoType","gain","vco","createOscillator","type","frequency","value","vca","createGain","connect","start","stop","noteToMidi","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar parser = require('note-parser')\n\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url\n * @return {Soundfont} a soundfont object\n */\nfunction Soundfont (ctx, nameToUrl) {\n  console.warn('new Soundfont() is deprected')\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()')\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx)\n\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl\n  this.ctx = ctx\n  this.instruments = {}\n  this.promises = []\n}\n\nSoundfont.prototype.onready = function (callback) {\n  console.warn('deprecated API')\n  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()')\n  Promise.all(this.promises).then(callback)\n}\n\nSoundfont.prototype.instrument = function (name, options) {\n  console.warn('new Soundfont().instrument() is deprecated.')\n  console.log('Please use Soundfont.instrument() instead.')\n  var ctx = this.ctx\n  name = name || 'default'\n  if (name in this.instruments) return this.instruments[name]\n  var inst = {name: name, play: oscillatorPlayer(ctx, options)}\n  this.instruments[name] = inst\n  if (name !== 'default') {\n    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {\n      inst.play = instrument.play\n      return inst\n    })\n    this.promises.push(promise)\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      promise.then(cb)\n    }\n  } else {\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      cb()\n    }\n  }\n  return inst\n}\n\n/*\n * Load the buffers of a given instrument name. It returns a promise that resolves\n * to a hash with midi note numbers as keys, and audio buffers as values.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name (it accepts an url if starts with \"http\")\n * @param {Object} options - (Optional) options object\n * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }\n *\n * The options object accepts the following keys:\n *\n * - nameToUrl {Function}: a function to convert from instrument names to urls.\n * By default it uses Benjamin Gleitzman's package of\n * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n * - notes {Array}: the list of note names to be decoded (all by default)\n *\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {\n *  buffers[60] // => An <AudioBuffer> corresponding to note C4\n * })\n */\nfunction loadBuffers (ac, name, options) {\n  console.warn('Soundfont.loadBuffers is deprecate.')\n  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.')\n  return Soundfont.instrument(ac, name, options).then(function (inst) {\n    return inst.buffers\n  })\n}\nSoundfont.loadBuffers = loadBuffers\n\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} defaultOptions - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.4)\n  * - destination: the player destination (default: ac.destination)\n */\nfunction oscillatorPlayer (ctx, defaultOptions) {\n  defaultOptions = defaultOptions || {}\n  return function (note, time, duration, options) {\n    console.warn('The oscillator player is deprecated.')\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.')\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note)\n    var freq = midi ? parser.midiToFreq(midi, 440) : null\n    if (!freq) return\n\n    duration = duration || 0.2\n\n    options = options || {}\n    var destination = options.destination || defaultOptions.destination || ctx.destination\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine'\n    var gain = options.gain || defaultOptions.gain || 0.4\n\n    var vco = ctx.createOscillator()\n    vco.type = vcoType\n    vco.frequency.value = freq\n\n    /* VCA */\n    var vca = ctx.createGain()\n    vca.gain.value = gain\n\n    /* Connections */\n    vco.connect(vca)\n    vca.connect(destination)\n\n    vco.start(time)\n    if (duration > 0) vco.stop(time + duration)\n    return vco\n  }\n}\n\n/**\n * Given a note name, return the note midi number\n *\n * @name noteToMidi\n * @function\n * @param {String} noteName\n * @return {Integer} the note midi number or null if not a valid note name\n */\nSoundfont.noteToMidi = parser.midi\n\nmodule.exports = Soundfont\n"]},"metadata":{},"sourceType":"script"}