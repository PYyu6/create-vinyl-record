{"ast":null,"code":"var _jsxFileName = \"/Users/sylviayu/Desktop/project/create-vinyl-record/src/Draw/ChordsAnmation.js\";\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst getPixelRatio = context => {\n  var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  return (window.devicePixelRatio || 1) / backingStore;\n};\n\nconst ChordsAnimation = props => {\n  //only if need to playchord then setchord\n  const {\n    curr_chord,\n    playChord,\n    setPlayChord\n  } = props;\n  const [audio, setAudio] = useState(null);\n  const [chord, setChord] = useState(); // const [playChord, setPlayChord] =useState(false)\n\n  const canvasRef = useRef(null);\n\n  const draw = (ctx, frameCount) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = 'white';\n    const r = 330;\n    const c = {\n      x: 350,\n      y: 350\n    };\n\n    if (chord) {\n      Object.keys(chord).forEach(item => {\n        ctx.beginPath();\n        let i = chord[item];\n        let deg = 15 + i * 30;\n        ctx.arc(c.x + r * Math.cos(deg * Math.PI / 180), c.y + r * Math.sin(deg * Math.PI / 180), 8 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI); // // ctx.arc(700, 350, 20*Math.sin(frameCount*0.05)**2, 0, 2*Math.PI)\n\n        ctx.fill();\n        console.log(chord[item]);\n      });\n    }\n  };\n\n  const play_sound = () => {\n    if (audio) {\n      setChord(curr_chord);\n      console.log(curr_chord);\n      Object.keys(curr_chord).forEach(item => audio.play(item + \"4\")); // audio.play(\"C5\")\n    }\n  };\n\n  useEffect(() => {\n    var Soundfont = require('soundfont-player');\n\n    var audioContext = new AudioContext();\n    Soundfont.instrument(audioContext, 'marimba').then(soundFontPlayer => {\n      setAudio(soundFontPlayer);\n    }); //document.addEventListener('mousemove', onmousemove, false);\n  }, []);\n  useEffect(() => {\n    // console.log(\"here\")\n    // console.log(curr_chord)\n    if (audio && playChord) {\n      play_sound();\n      setPlayChord(false);\n    }\n  }, [audio, playChord]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n    let ratio = getPixelRatio(context);\n    let width = window.getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n    let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2); // console.log(width, height)\n\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`; //Our draw came here\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      width: window.innerWidth,\n      height: window.innerHeigh\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default ChordsAnimation;","map":{"version":3,"sources":["/Users/sylviayu/Desktop/project/create-vinyl-record/src/Draw/ChordsAnmation.js"],"names":["React","useRef","useEffect","useState","getPixelRatio","context","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","window","devicePixelRatio","ChordsAnimation","props","curr_chord","playChord","setPlayChord","audio","setAudio","chord","setChord","canvasRef","draw","ctx","frameCount","clearRect","canvas","width","height","fillStyle","r","c","x","y","Object","keys","forEach","item","beginPath","i","deg","arc","Math","cos","PI","sin","fill","console","log","play_sound","play","Soundfont","require","audioContext","AudioContext","instrument","then","soundFontPlayer","current","getContext","animationFrameId","ratio","getComputedStyle","getPropertyValue","slice","style","render","requestAnimationFrame","cancelAnimationFrame","innerWidth","innerHeigh"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\n\nconst getPixelRatio = context => {\n  var backingStore =\n  context.backingStorePixelRatio ||\n  context.webkitBackingStorePixelRatio ||\n  context.mozBackingStorePixelRatio ||\n  context.msBackingStorePixelRatio ||\n  context.oBackingStorePixelRatio ||\n  context.backingStorePixelRatio ||\n  1;\n  \n  return (window.devicePixelRatio || 1) / backingStore;\n};\n\nconst ChordsAnimation = props => {\n  //only if need to playchord then setchord\n  const { curr_chord,  playChord, setPlayChord} = props\n  const [audio, setAudio] = useState(null)\n  const [chord, setChord] = useState()  \n  // const [playChord, setPlayChord] =useState(false)\n\n  const canvasRef = useRef(null)\n  \n  const draw = (ctx, frameCount) => {\n    \n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    ctx.fillStyle = 'white'\n\n    const r = 330\n    const c = {x: 350, y: 350}\n\n    if (chord){\n      Object.keys(chord).forEach(item=> {\n        ctx.beginPath()\n        let i = chord[item]\n        let deg = 15 + i* 30\n        ctx.arc(c.x + r* Math.cos(deg * Math.PI /180), c.y + r* Math.sin(deg *Math.PI /180), 8*Math.sin(frameCount*0.05)**2, 0, 2*Math.PI)\n        // // ctx.arc(700, 350, 20*Math.sin(frameCount*0.05)**2, 0, 2*Math.PI)\n        ctx.fill()\n        console.log(chord[item])})\n    }\n\n  }\n\n  const play_sound = (() => {\n    if (audio){\n      setChord(curr_chord)\n      console.log(curr_chord)\n      Object.keys(curr_chord).forEach(item => audio.play(item +\"4\"))\n      // audio.play(\"C5\")\n      \n    }\n  })\n\n \n\n  useEffect(()=>{\n    var Soundfont = require('soundfont-player')\n    var  audioContext = new AudioContext()\n    Soundfont.instrument(audioContext, 'marimba')\n      .then(soundFontPlayer => {\n        setAudio(soundFontPlayer)\n      })\n    //document.addEventListener('mousemove', onmousemove, false);\n  }, [])\n\n  useEffect(()=>{\n    // console.log(\"here\")\n    // console.log(curr_chord)\n    if (audio && playChord) {\n        \n        play_sound()\n        setPlayChord(false) \n            \n    }\n  }, [audio, playChord]);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n    let frameCount = 0\n    let animationFrameId\n    let ratio = getPixelRatio(context);\n    let width = window.getComputedStyle(canvas)\n        .getPropertyValue('width')\n        .slice(0, -2);\n    let height = getComputedStyle(canvas)\n        .getPropertyValue('height')\n       .slice(0, -2);\n    // console.log(width, height)\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    \n    \n    //Our draw came here\n    const render = () => {\n      frameCount++\n      draw(context, frameCount)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n    render()\n    \n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [draw])\n  \n  return <canvas ref={canvasRef} style={{ width: window.innerWidth, height: window.innerHeigh}}/>\n}\n\nexport default ChordsAnimation"]},"metadata":{},"sourceType":"module"}