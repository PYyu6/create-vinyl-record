{"ast":null,"code":"var midimessage = require('midimessage');\n\nmodule.exports = function (player) {\n  /**\n  * Connect a player to a midi input\n  *\n  * The options accepts:\n  *\n  * - channel: the channel to listen to. Listen to all channels by default.\n  *\n  * @param {MIDIInput} input\n  * @param {Object} options - (Optional)\n  * @return {SamplePlayer} the player\n  * @example\n  * var piano = player(...)\n  * window.navigator.requestMIDIAccess().then(function (midiAccess) {\n  *   midiAccess.inputs.forEach(function (midiInput) {\n  *     piano.listenToMidi(midiInput)\n  *   })\n  * })\n  */\n  player.listenToMidi = function (input, options) {\n    var started = {};\n    var opts = options || {};\n\n    var gain = opts.gain || function (vel) {\n      return vel / 127;\n    };\n\n    input.onmidimessage = function (msg) {\n      var mm = msg.messageType ? msg : midimessage(msg);\n\n      if (mm.messageType === 'noteon' && mm.velocity === 0) {\n        mm.messageType = 'noteoff';\n      }\n\n      if (opts.channel && mm.channel !== opts.channel) return;\n\n      switch (mm.messageType) {\n        case 'noteon':\n          started[mm.key] = player.play(mm.key, 0, {\n            gain: gain(mm.velocity)\n          });\n          break;\n\n        case 'noteoff':\n          if (started[mm.key]) {\n            started[mm.key].stop();\n            delete started[mm.key];\n          }\n\n          break;\n      }\n    };\n\n    return player;\n  };\n\n  return player;\n};","map":{"version":3,"sources":["/Users/sylviayu/node_modules/sample-player/lib/midi.js"],"names":["midimessage","require","module","exports","player","listenToMidi","input","options","started","opts","gain","vel","onmidimessage","msg","mm","messageType","velocity","channel","key","play","stop"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkB;AACjC;;;;;;;;;;;;;;;;;;AAkBAA,EAAAA,MAAM,CAACC,YAAP,GAAsB,UAAUC,KAAV,EAAiBC,OAAjB,EAA0B;AAC9C,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,IAAI,GAAGF,OAAO,IAAI,EAAtB;;AACA,QAAIG,IAAI,GAAGD,IAAI,CAACC,IAAL,IAAa,UAAUC,GAAV,EAAe;AAAE,aAAOA,GAAG,GAAG,GAAb;AAAkB,KAA3D;;AAEAL,IAAAA,KAAK,CAACM,aAAN,GAAsB,UAAUC,GAAV,EAAe;AACnC,UAAIC,EAAE,GAAGD,GAAG,CAACE,WAAJ,GAAkBF,GAAlB,GAAwBb,WAAW,CAACa,GAAD,CAA5C;;AACA,UAAIC,EAAE,CAACC,WAAH,KAAmB,QAAnB,IAA+BD,EAAE,CAACE,QAAH,KAAgB,CAAnD,EAAsD;AACpDF,QAAAA,EAAE,CAACC,WAAH,GAAiB,SAAjB;AACD;;AACD,UAAIN,IAAI,CAACQ,OAAL,IAAgBH,EAAE,CAACG,OAAH,KAAeR,IAAI,CAACQ,OAAxC,EAAiD;;AAEjD,cAAQH,EAAE,CAACC,WAAX;AACE,aAAK,QAAL;AACEP,UAAAA,OAAO,CAACM,EAAE,CAACI,GAAJ,CAAP,GAAkBd,MAAM,CAACe,IAAP,CAAYL,EAAE,CAACI,GAAf,EAAoB,CAApB,EAAuB;AAAER,YAAAA,IAAI,EAAEA,IAAI,CAACI,EAAE,CAACE,QAAJ;AAAZ,WAAvB,CAAlB;AACA;;AACF,aAAK,SAAL;AACE,cAAIR,OAAO,CAACM,EAAE,CAACI,GAAJ,CAAX,EAAqB;AACnBV,YAAAA,OAAO,CAACM,EAAE,CAACI,GAAJ,CAAP,CAAgBE,IAAhB;AACA,mBAAOZ,OAAO,CAACM,EAAE,CAACI,GAAJ,CAAd;AACD;;AACD;AATJ;AAWD,KAlBD;;AAmBA,WAAOd,MAAP;AACD,GAzBD;;AA0BA,SAAOA,MAAP;AACD,CA9CD","sourcesContent":["var midimessage = require('midimessage')\n\nmodule.exports = function (player) {\n  /**\n  * Connect a player to a midi input\n  *\n  * The options accepts:\n  *\n  * - channel: the channel to listen to. Listen to all channels by default.\n  *\n  * @param {MIDIInput} input\n  * @param {Object} options - (Optional)\n  * @return {SamplePlayer} the player\n  * @example\n  * var piano = player(...)\n  * window.navigator.requestMIDIAccess().then(function (midiAccess) {\n  *   midiAccess.inputs.forEach(function (midiInput) {\n  *     piano.listenToMidi(midiInput)\n  *   })\n  * })\n  */\n  player.listenToMidi = function (input, options) {\n    var started = {}\n    var opts = options || {}\n    var gain = opts.gain || function (vel) { return vel / 127 }\n\n    input.onmidimessage = function (msg) {\n      var mm = msg.messageType ? msg : midimessage(msg)\n      if (mm.messageType === 'noteon' && mm.velocity === 0) {\n        mm.messageType = 'noteoff'\n      }\n      if (opts.channel && mm.channel !== opts.channel) return\n\n      switch (mm.messageType) {\n        case 'noteon':\n          started[mm.key] = player.play(mm.key, 0, { gain: gain(mm.velocity) })\n          break\n        case 'noteoff':\n          if (started[mm.key]) {\n            started[mm.key].stop()\n            delete started[mm.key]\n          }\n          break\n      }\n    }\n    return player\n  }\n  return player\n}\n"]},"metadata":{},"sourceType":"script"}