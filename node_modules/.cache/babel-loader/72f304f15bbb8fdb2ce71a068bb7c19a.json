{"ast":null,"code":"/* global XMLHttpRequest */\n'use strict';\n/**\n * Given a url and a return type, returns a promise to the content of the url\n * Basically it wraps a XMLHttpRequest into a Promise\n *\n * @param {String} url\n * @param {String} type - can be 'text' or 'arraybuffer'\n * @return {Promise}\n */\n\nmodule.exports = function (url, type) {\n  return new Promise(function (done, reject) {\n    var req = new XMLHttpRequest();\n    if (type) req.responseType = type;\n    req.open('GET', url);\n\n    req.onload = function () {\n      req.status === 200 ? done(req.response) : reject(Error(req.statusText));\n    };\n\n    req.onerror = function () {\n      reject(Error('Network Error'));\n    };\n\n    req.send();\n  });\n};","map":{"version":3,"sources":["/Users/sylviayu/node_modules/audio-loader/lib/fetch.js"],"names":["module","exports","url","type","Promise","done","reject","req","XMLHttpRequest","responseType","open","onload","status","response","Error","statusText","onerror","send"],"mappings":"AAAA;AACA;AAEA;;;;;;;;;AAQAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACpC,SAAO,IAAIC,OAAJ,CAAY,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACzC,QAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACA,QAAIL,IAAJ,EAAUI,GAAG,CAACE,YAAJ,GAAmBN,IAAnB;AAEVI,IAAAA,GAAG,CAACG,IAAJ,CAAS,KAAT,EAAgBR,GAAhB;;AACAK,IAAAA,GAAG,CAACI,MAAJ,GAAa,YAAY;AACvBJ,MAAAA,GAAG,CAACK,MAAJ,KAAe,GAAf,GAAqBP,IAAI,CAACE,GAAG,CAACM,QAAL,CAAzB,GAA0CP,MAAM,CAACQ,KAAK,CAACP,GAAG,CAACQ,UAAL,CAAN,CAAhD;AACD,KAFD;;AAGAR,IAAAA,GAAG,CAACS,OAAJ,GAAc,YAAY;AAAEV,MAAAA,MAAM,CAACQ,KAAK,CAAC,eAAD,CAAN,CAAN;AAAgC,KAA5D;;AACAP,IAAAA,GAAG,CAACU,IAAJ;AACD,GAVM,CAAP;AAWD,CAZD","sourcesContent":["/* global XMLHttpRequest */\n'use strict'\n\n/**\n * Given a url and a return type, returns a promise to the content of the url\n * Basically it wraps a XMLHttpRequest into a Promise\n *\n * @param {String} url\n * @param {String} type - can be 'text' or 'arraybuffer'\n * @return {Promise}\n */\nmodule.exports = function (url, type) {\n  return new Promise(function (done, reject) {\n    var req = new XMLHttpRequest()\n    if (type) req.responseType = type\n\n    req.open('GET', url)\n    req.onload = function () {\n      req.status === 200 ? done(req.response) : reject(Error(req.statusText))\n    }\n    req.onerror = function () { reject(Error('Network Error')) }\n    req.send()\n  })\n}\n"]},"metadata":{},"sourceType":"script"}