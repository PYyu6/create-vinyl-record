{"ast":null,"code":"'use strict';\n\nvar isArr = Array.isArray;\n\nvar isObj = function isObj(o) {\n  return o && typeof o === 'object';\n};\n\nvar OPTS = {};\n\nmodule.exports = function (player) {\n  /**\n   * Schedule a list of events to be played at specific time.\n   *\n   * It supports three formats of events for the events list:\n   *\n   * - An array with [time, note]\n   * - An array with [time, object]\n   * - An object with { time: ?, [name|note|midi|key]: ? }\n   *\n   * @param {Float} time - an absolute time to start (or AudioContext's\n   * currentTime if provided number is 0)\n   * @param {Array} events - the events list.\n   * @return {Array} an array of ids\n   *\n   * @example\n   * // Event format: [time, note]\n   * var piano = player(ac, ...).connect(ac.destination)\n   * piano.schedule(0, [ [0, 'C2'], [0.5, 'C3'], [1, 'C4'] ])\n   *\n   * @example\n   * // Event format: an object { time: ?, name: ? }\n   * var drums = player(ac, ...).connect(ac.destination)\n   * drums.schedule(0, [\n   *   { name: 'kick', time: 0 },\n   *   { name: 'snare', time: 0.5 },\n   *   { name: 'kick', time: 1 },\n   *   { name: 'snare', time: 1.5 }\n   * ])\n   */\n  player.schedule = function (time, events) {\n    var now = player.context.currentTime;\n    var when = time < now ? now : time;\n    player.emit('schedule', when, events);\n    var t, o, note, opts;\n    return events.map(function (event) {\n      if (!event) return null;else if (isArr(event)) {\n        t = event[0];\n        o = event[1];\n      } else {\n        t = event.time;\n        o = event;\n      }\n\n      if (isObj(o)) {\n        note = o.name || o.key || o.note || o.midi || null;\n        opts = o;\n      } else {\n        note = o;\n        opts = OPTS;\n      }\n\n      return player.start(note, when + (t || 0), opts);\n    });\n  };\n\n  return player;\n};","map":{"version":3,"sources":["/Users/sylviayu/node_modules/sample-player/lib/scheduler.js"],"names":["isArr","Array","isArray","isObj","o","OPTS","module","exports","player","schedule","time","events","now","context","currentTime","when","emit","t","note","opts","map","event","name","key","midi","start"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,KAAK,CAACC,OAAlB;;AACA,IAAIC,KAAK,GAAG,SAARA,KAAQ,CAAUC,CAAV,EAAa;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAzB;AAAmC,CAA9D;;AACA,IAAIC,IAAI,GAAG,EAAX;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkB;AACjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BAA,EAAAA,MAAM,CAACC,QAAP,GAAkB,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACxC,QAAIC,GAAG,GAAGJ,MAAM,CAACK,OAAP,CAAeC,WAAzB;AACA,QAAIC,IAAI,GAAGL,IAAI,GAAGE,GAAP,GAAaA,GAAb,GAAmBF,IAA9B;AACAF,IAAAA,MAAM,CAACQ,IAAP,CAAY,UAAZ,EAAwBD,IAAxB,EAA8BJ,MAA9B;AACA,QAAIM,CAAJ,EAAOb,CAAP,EAAUc,IAAV,EAAgBC,IAAhB;AACA,WAAOR,MAAM,CAACS,GAAP,CAAW,UAAUC,KAAV,EAAiB;AACjC,UAAI,CAACA,KAAL,EAAY,OAAO,IAAP,CAAZ,KACK,IAAIrB,KAAK,CAACqB,KAAD,CAAT,EAAkB;AACrBJ,QAAAA,CAAC,GAAGI,KAAK,CAAC,CAAD,CAAT;AAAcjB,QAAAA,CAAC,GAAGiB,KAAK,CAAC,CAAD,CAAT;AACf,OAFI,MAEE;AACLJ,QAAAA,CAAC,GAAGI,KAAK,CAACX,IAAV;AAAgBN,QAAAA,CAAC,GAAGiB,KAAJ;AACjB;;AAED,UAAIlB,KAAK,CAACC,CAAD,CAAT,EAAc;AACZc,QAAAA,IAAI,GAAGd,CAAC,CAACkB,IAAF,IAAUlB,CAAC,CAACmB,GAAZ,IAAmBnB,CAAC,CAACc,IAArB,IAA6Bd,CAAC,CAACoB,IAA/B,IAAuC,IAA9C;AACAL,QAAAA,IAAI,GAAGf,CAAP;AACD,OAHD,MAGO;AACLc,QAAAA,IAAI,GAAGd,CAAP;AACAe,QAAAA,IAAI,GAAGd,IAAP;AACD;;AAED,aAAOG,MAAM,CAACiB,KAAP,CAAaP,IAAb,EAAmBH,IAAI,IAAIE,CAAC,IAAI,CAAT,CAAvB,EAAoCE,IAApC,CAAP;AACD,KAjBM,CAAP;AAkBD,GAvBD;;AAwBA,SAAOX,MAAP;AACD,CAvDD","sourcesContent":["'use strict'\n\nvar isArr = Array.isArray\nvar isObj = function (o) { return o && typeof o === 'object' }\nvar OPTS = {}\n\nmodule.exports = function (player) {\n  /**\n   * Schedule a list of events to be played at specific time.\n   *\n   * It supports three formats of events for the events list:\n   *\n   * - An array with [time, note]\n   * - An array with [time, object]\n   * - An object with { time: ?, [name|note|midi|key]: ? }\n   *\n   * @param {Float} time - an absolute time to start (or AudioContext's\n   * currentTime if provided number is 0)\n   * @param {Array} events - the events list.\n   * @return {Array} an array of ids\n   *\n   * @example\n   * // Event format: [time, note]\n   * var piano = player(ac, ...).connect(ac.destination)\n   * piano.schedule(0, [ [0, 'C2'], [0.5, 'C3'], [1, 'C4'] ])\n   *\n   * @example\n   * // Event format: an object { time: ?, name: ? }\n   * var drums = player(ac, ...).connect(ac.destination)\n   * drums.schedule(0, [\n   *   { name: 'kick', time: 0 },\n   *   { name: 'snare', time: 0.5 },\n   *   { name: 'kick', time: 1 },\n   *   { name: 'snare', time: 1.5 }\n   * ])\n   */\n  player.schedule = function (time, events) {\n    var now = player.context.currentTime\n    var when = time < now ? now : time\n    player.emit('schedule', when, events)\n    var t, o, note, opts\n    return events.map(function (event) {\n      if (!event) return null\n      else if (isArr(event)) {\n        t = event[0]; o = event[1]\n      } else {\n        t = event.time; o = event\n      }\n\n      if (isObj(o)) {\n        note = o.name || o.key || o.note || o.midi || null\n        opts = o\n      } else {\n        note = o\n        opts = OPTS\n      }\n\n      return player.start(note, when + (t || 0), opts)\n    })\n  }\n  return player\n}\n"]},"metadata":{},"sourceType":"script"}