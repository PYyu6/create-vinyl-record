{"ast":null,"code":"'use strict';\n\nvar load = require('audio-loader');\n\nvar player = require('sample-player');\n/**\n * Load a soundfont instrument. It returns a promise that resolves to a\n * instrument object.\n *\n * The instrument object returned by the promise has the following properties:\n *\n * - name: the instrument name\n * - play: A function to play notes from the buffer with the signature\n * `play(note, time, duration, options)`\n *\n *\n * The valid options are:\n *\n * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'\n * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'\n * - `nameToUrl` <Function>: a function to convert from instrument names to URL\n * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.\n * - `gain`: the gain of the player (1 by default)\n * - `notes`: an array of the notes to decode. It can be an array of strings\n * with note names or an array of numbers with midi note numbers. This is a\n * performance option: since decoding mp3 is a cpu intensive process, you can limit\n * limit the number of notes you want and reduce the time to load the instrument.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'\n * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers\n * @return {Promise}\n *\n * @example\n * var Soundfont = require('sounfont-player')\n * Soundfont.instrument('marimba').then(function (marimba) {\n *   marimba.play('C4')\n * })\n */\n\n\nfunction instrument(ac, name, options) {\n  if (arguments.length === 1) return function (n, o) {\n    return instrument(ac, n, o);\n  };\n  var opts = options || {};\n  var isUrl = opts.isSoundfontURL || isSoundfontURL;\n  var toUrl = opts.nameToUrl || nameToUrl;\n  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format);\n  return load(ac, url, {\n    only: opts.only || opts.notes\n  }).then(function (buffers) {\n    var p = player(ac, buffers, opts).connect(opts.destination ? opts.destination : ac.destination);\n    p.url = url;\n    p.name = name;\n    return p;\n  });\n}\n\nfunction isSoundfontURL(name) {\n  return /\\.js(\\?.*)?$/i.test(name);\n}\n/**\n * Given an instrument name returns a URL to to the Benjamin Gleitzman's\n * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n *\n * @param {String} name - instrument name\n * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'\n * or 'MusyngKite' ('MusyngKite' by default)\n * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)\n * @returns {String} the Soundfont file url\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.nameToUrl('marimba', 'mp3')\n */\n\n\nfunction nameToUrl(name, sf, format) {\n  format = format === 'ogg' ? format : 'mp3';\n  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite';\n  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js';\n} // In the 1.0.0 release it will be:\n// var Soundfont = {}\n\n\nvar Soundfont = require('./legacy');\n\nSoundfont.instrument = instrument;\nSoundfont.nameToUrl = nameToUrl;\nif (typeof module === 'object' && module.exports) module.exports = Soundfont;\nif (typeof window !== 'undefined') window.Soundfont = Soundfont;","map":{"version":3,"sources":["/Users/sylviayu/node_modules/soundfont-player/lib/index.js"],"names":["load","require","player","instrument","ac","name","options","arguments","length","n","o","opts","isUrl","isSoundfontURL","toUrl","nameToUrl","url","soundfont","format","only","notes","then","buffers","p","connect","destination","test","sf","Soundfont","module","exports","window"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASE,UAAT,CAAqBC,EAArB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACtC,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B,OAAO,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOP,UAAU,CAACC,EAAD,EAAKK,CAAL,EAAQC,CAAR,CAAjB;AAA6B,GAAtD;AAC5B,MAAIC,IAAI,GAAGL,OAAO,IAAI,EAAtB;AACA,MAAIM,KAAK,GAAGD,IAAI,CAACE,cAAL,IAAuBA,cAAnC;AACA,MAAIC,KAAK,GAAGH,IAAI,CAACI,SAAL,IAAkBA,SAA9B;AACA,MAAIC,GAAG,GAAGJ,KAAK,CAACP,IAAD,CAAL,GAAcA,IAAd,GAAqBS,KAAK,CAACT,IAAD,EAAOM,IAAI,CAACM,SAAZ,EAAuBN,IAAI,CAACO,MAA5B,CAApC;AAEA,SAAOlB,IAAI,CAACI,EAAD,EAAKY,GAAL,EAAU;AAAEG,IAAAA,IAAI,EAAER,IAAI,CAACQ,IAAL,IAAaR,IAAI,CAACS;AAA1B,GAAV,CAAJ,CAAiDC,IAAjD,CAAsD,UAAUC,OAAV,EAAmB;AAC9E,QAAIC,CAAC,GAAGrB,MAAM,CAACE,EAAD,EAAKkB,OAAL,EAAcX,IAAd,CAAN,CAA0Ba,OAA1B,CAAkCb,IAAI,CAACc,WAAL,GAAmBd,IAAI,CAACc,WAAxB,GAAsCrB,EAAE,CAACqB,WAA3E,CAAR;AACAF,IAAAA,CAAC,CAACP,GAAF,GAAQA,GAAR;AACAO,IAAAA,CAAC,CAAClB,IAAF,GAASA,IAAT;AACA,WAAOkB,CAAP;AACD,GALM,CAAP;AAMD;;AAED,SAASV,cAAT,CAAyBR,IAAzB,EAA+B;AAC7B,SAAO,gBAAgBqB,IAAhB,CAAqBrB,IAArB,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAaA,SAASU,SAAT,CAAoBV,IAApB,EAA0BsB,EAA1B,EAA8BT,MAA9B,EAAsC;AACpCA,EAAAA,MAAM,GAAGA,MAAM,KAAK,KAAX,GAAmBA,MAAnB,GAA4B,KAArC;AACAS,EAAAA,EAAE,GAAGA,EAAE,KAAK,YAAP,GAAsBA,EAAtB,GAA2B,YAAhC;AACA,SAAO,iDAAiDA,EAAjD,GAAsD,GAAtD,GAA4DtB,IAA5D,GAAmE,GAAnE,GAAyEa,MAAzE,GAAkF,KAAzF;AACD,C,CAED;AACA;;;AACA,IAAIU,SAAS,GAAG3B,OAAO,CAAC,UAAD,CAAvB;;AACA2B,SAAS,CAACzB,UAAV,GAAuBA,UAAvB;AACAyB,SAAS,CAACb,SAAV,GAAsBA,SAAtB;AAEA,IAAI,OAAOc,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,OAAzC,EAAkDD,MAAM,CAACC,OAAP,GAAiBF,SAAjB;AAClD,IAAI,OAAOG,MAAP,KAAkB,WAAtB,EAAmCA,MAAM,CAACH,SAAP,GAAmBA,SAAnB","sourcesContent":["'use strict'\n\nvar load = require('audio-loader')\nvar player = require('sample-player')\n\n/**\n * Load a soundfont instrument. It returns a promise that resolves to a\n * instrument object.\n *\n * The instrument object returned by the promise has the following properties:\n *\n * - name: the instrument name\n * - play: A function to play notes from the buffer with the signature\n * `play(note, time, duration, options)`\n *\n *\n * The valid options are:\n *\n * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'\n * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'\n * - `nameToUrl` <Function>: a function to convert from instrument names to URL\n * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.\n * - `gain`: the gain of the player (1 by default)\n * - `notes`: an array of the notes to decode. It can be an array of strings\n * with note names or an array of numbers with midi note numbers. This is a\n * performance option: since decoding mp3 is a cpu intensive process, you can limit\n * limit the number of notes you want and reduce the time to load the instrument.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'\n * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers\n * @return {Promise}\n *\n * @example\n * var Soundfont = require('sounfont-player')\n * Soundfont.instrument('marimba').then(function (marimba) {\n *   marimba.play('C4')\n * })\n */\nfunction instrument (ac, name, options) {\n  if (arguments.length === 1) return function (n, o) { return instrument(ac, n, o) }\n  var opts = options || {}\n  var isUrl = opts.isSoundfontURL || isSoundfontURL\n  var toUrl = opts.nameToUrl || nameToUrl\n  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format)\n\n  return load(ac, url, { only: opts.only || opts.notes }).then(function (buffers) {\n    var p = player(ac, buffers, opts).connect(opts.destination ? opts.destination : ac.destination)\n    p.url = url\n    p.name = name\n    return p\n  })\n}\n\nfunction isSoundfontURL (name) {\n  return /\\.js(\\?.*)?$/i.test(name)\n}\n\n/**\n * Given an instrument name returns a URL to to the Benjamin Gleitzman's\n * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n *\n * @param {String} name - instrument name\n * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'\n * or 'MusyngKite' ('MusyngKite' by default)\n * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)\n * @returns {String} the Soundfont file url\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.nameToUrl('marimba', 'mp3')\n */\nfunction nameToUrl (name, sf, format) {\n  format = format === 'ogg' ? format : 'mp3'\n  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite'\n  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js'\n}\n\n// In the 1.0.0 release it will be:\n// var Soundfont = {}\nvar Soundfont = require('./legacy')\nSoundfont.instrument = instrument\nSoundfont.nameToUrl = nameToUrl\n\nif (typeof module === 'object' && module.exports) module.exports = Soundfont\nif (typeof window !== 'undefined') window.Soundfont = Soundfont\n"]},"metadata":{},"sourceType":"script"}